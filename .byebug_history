c
q!
c
retry_count.to_i + 1
retry_count + 1
retry_count
redis.set('retry_count', retry_count + 1)
retry_count
redis.get('retry_count')
c
n
redis.get('retry_count')
c
redis.get('retry_count')
c!
c
response
q!
last_line.values
last_line
last_line.first
last_line
last_line.pluck(:id)
last_line.pluck('id')
last_line.pluck
last_line
last_line[:id]
last_line.id
last_line
last_line.pluck(:id)
last_line.pluck(:id
last_line
c
exit
response
c
response
c
response
n
c!
q!
mocked_response[:data].last.values
mocked_response[:data].last
mocked_response[:data]
mocked_response.data
mocked_response
exit
mocked_response
c
last_id_on_csv
exit
CsvHandler.new('app/services/customers_info.csv')
CsvHandler
last_id_on_csv
c
d
c
response
c
n
response.has_more
response
c
'sk_test_RsUIbMyxLQszELZQEXHTeFA9008YRV7Vhr' == "sk_test_RsUIbMyxLQszELZQEXHTeFA9008YRV7Vhr"
Stripe.api_key
c
n
c
Stripe.api_key
c
n
Stripe.api
c
q!
c
exit
c
@job_id
c
@job_id
c
seconds_to_retry
n
@job_id
retry_count
c
@job_id
c
n
c
n
c
retry_number
    retry_number = redis.get("#{@job_id}_retry_count") || 0
redis.get("#{@job_id}_retry_count") || 0
redis.get("#{@job_id}_retry_count")
    redis = Redis.new
redis.get
redis = Redis.new
Redis.new
redis
Redis.new
Redis
redis
c
retry_number
c
q!
c
retry_number
c
current
var const
var global
var
var instance
v
vars
varws
current_retry
exit
retry_count
c
retry_count
exit
var global
var all
v
current_retry
exit
{:data} = Stripe::Customer.list({ limit: 50, starting_after: last_customer_id_saved })
q!
n
line
c
q
const = line_attributes.map { |attribute| "line.#{attribute}".constantize }
line_attributes.map { |attribute| "line.#{attribute}".constantize }
line_attributes.map { |attribute| "line.#{attribute}" }
line_attributes
c
last_customer_id_saved
c
q
@csv_handle
c
@csv_handler = CsvHandler.new('app/services/customers_info.csv')
CsvHandler.new('app/services/customers_info.csv')
CsvHandler.new
CsvHandler
@csv_handle
c
CSV.read('app/services/customers_info.csv').last&.first
CSV.read('app/services/customers_info.csv').last.first
q!
CSV.read("app/services/customers_info.csv").last.first
CSV.read("app/services/customers_info.csv").last
CSV.read("app/services/customers_info.csv").last.first
CSV.readlines("app/services/customers_info.csv").last
CSV.readlines("app/services/customers_info.csv")
CSV.read("app/services/customers_info.csv")
CSV.read("app/services/customers_info.csv").last
CSV.read("app/services/customers_info.csv")
CSV.read
c!
c
q!
c
q!
c
response.values
response
\
response
response.keys
response
response.first
response
object
has_more
object, data, has_more, url = response
response
response.data.first.class
response.data.class
response.data
customers_info
response.data.last.id
c
response.has_more
c
response.has_more
q
c
csv << [customer.id, customer.name, customer.email]
        csv << customer.id
        csv << customer.name
        csv << customer.email
csv
        csv << customer.id
        csv << customer.name
        csv << customer.email
[customer.id, customer.name
customer.id, customer.name
customer.id
customer
csv << customer.values
csv customer.values
csv << customer
customer
customer.values
csv
c
customers_info.has_more?
customers_info.has_more
customers_info.has_more?
customers_info.has_more
customers_info.hash_more
customers_info.object
customers_info.keys
customers_info
customers_info.count
customers_info
csv_file = CSV.open('app/services/customers_info.csv', 'wb') do |csv|
      customers_info.data.map do |customer|
        csv << customer.values
      end
    end
q!
customers_list.data.first.values.to_csv
customers_list.data.first.values
customers_list.data.first
customers_list.data
customers_list.fist
customers_list
customers_list.first.to_csv
customers_list.first
customers_list
customers
customers_list.data
customer_list.data
    csv_file = CSV.open('app/services/customers_info.csv', 'wb') do |csv|
      customers_list.data.map do |customer|
        csv << customer
      end
    end
q!
reload!
CSV.open('app/services/customers_info.csv', opt) do |csv|
      csv << customers_list.data.map
    end
CSV.open('app/services/customers_info.csv', 'wb') do |csv|
      csv << customers_list.data.map
    end
CSV.open('app/services/customers_info.csv') do |csv|
      csv << customers_list.data.map
